<style>
.syw-container {
        height: 110vw;
        max-height: 90vh;
        overflow: hidden;
        position: relative;
        -webkit-tap-highlight-color: transparent;
        user-select: none;
    }
      syw-header-content h1{
          margin: 0
      }
.line-container {
        width: 55vw;
        height: 16px;
        margin: 0 auto;
        display: flex;
        align-items: center;
        max-width: 970px;
        left: 50%;
        bottom: 28%;
        transform: translateX(-50%);
        position: absolute;
        z-index: 2;
        touch-action: none;
    }

.line, .line2 {
        width: 100%;
        height: 8px;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    }

.line2 {
        width: 0;
    }

.stop {
      display: block;
    border-left: 2px solid {{ section.settings.right_border_color }};
      height: 100%;
      z-index: 1;
      cursor: pointer;
      transition: border .2s linear;
    }

.stop.active {
  border-left: 2px solid {{ section.settings.left_border_color }}

    }

.stop:nth-child({{ section.settings.number_of_items | plus: 2 }}) {
        border-right: 2px solid #D1E1E4;
    }

    .knob {
          width: 32px;
        height: 38px;
        z-index: 2;
        cursor: grabbing;
        cursor: grab;
        box-shadow: 0 0 5px rgb(0 0 0 / 20%);
        border-radius: 4px;
        transition: box-shadow .3s ease;
        position: relative;
    }

    .knob.dragging {
        cursor: grabbing;
        font-size: 16px;
    }

    .knob-container {
        width: 32px;
        display: flex;
        justify-content: flex-end;
        position: absolute;
        left: -16px;
    }

    .image-container {
        position: relative;
        z-index: 1;
        width: 145vw;
        height: 58.3vw;
        top: 42%;
        overflow: hidden;
        transform: translate(-50%, -50%);
        left: 50%;
    }

    .item-image {
        position: absolute;
        top: 8px;
        left: 0;
        width: 100%;
        height: 100%;
        transition: opacity 0.4s ease;
    }

    .item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .label {
        position: absolute;
        top: 35px;
        color: #fff;
        font-weight: bold;
        font-size: 13px;
        width: 0;
        text-transform: uppercase;
        font-family: Lato, sans-serif;
        -webkit-font-smoothing: antialiased;
        letter-spacing: .5px;
        user-select: none;
        pointer-events: none;
    }

    .label.empty {
      /* padding-left: 10px; */
        left: -35px;
    }

    .label.full {
      
      right: 50px;
    }

    .syw-comparison-items {
        position: absolute;
        bottom: calc(100% + 3px);
        text-align: center;
        white-space: nowrap;
        font-weight: bold;
        font-size: 14px;
        transition: font-size .3s ease, top .3s ease;
        transform: translate(-50%, 0);
        left: 50%;
        font-family: "Lato", sans-serif;
        letter-spacing: .5px;
        font-weight: 700;
        font-size: 14px;
        white-space: nowrap;
    }
.br_text-base-sans-bold-spaced, .br_text-base-sans-bold-stretched {
    font-family: GTUltra, Lato, Noto Sans, Noto Sans JP, Noto Sans KR, Noto Sans SC, Noto Sans TC, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", Segoe UI Symbol, "Noto Color Emoji";
    font-size: .9285714285714286rem;
    line-height: 1.5rem;
    font-weight: 700;
    letter-spacing: .025em;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
    @media (min-width: 768px) {
        .image-container {
            width: 80vw;
            height: 32.2vw;
            top: 49%;
        }

        .syw-container {
            height: 100vw;
        }

    .md\:br_text-6xl-serif {
        font-family: GTUltra, Frank Ruhl Libre, "PT Serif", "Noto Serif", "Noto Serif JP", "Noto Serif KR", "Noto Serif SC", "Noto Serif TC", ui-serif, Georgia, Cambria, Times New Roman, Times, serif;
        font-size: 3.5rem;
        line-height: 4.5rem;
        font-weight: 400;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
}
      syw-header-content h1{
          margin: 0
      }

        .line-container {
            height: 32px;
        }

        .label {
            top: -35px;
            bottom: 9px;
            font-size: 18px;
        }

        .label.empty {
            /* left: -100px; */
        }

        .label.full {
            /* right: -40px; */
        }

        .syw-comparison-items {
            bottom: unset;
            top: calc(100% + 12px);
        }
    }

    @media (min-width: 1024px) {
        .syw-container {
            height: 55vw;
            max-height: 80vh;
        }

        .line-container {
            bottom: 90px;
        }
    }

    .image-container img {
        width: 100%;
        transform: translateY(0%);
    }



    @keyframes color-in-stop {
        100% {
            border-left: 2px solid #357176;
        }
    }

    .transition-grow {
        transition: width ease 500ms;
    }

    .syw-header-content {
        position: absolute;
        top: 0;
        width: 100%;
        text-align: center;
        z-index: 1;
    }

    .syw-header-content h1 {
        text-decoration: none;
      padding-top: 30px;
    }

    .syw-header-content p {
        text-align: center;
        margin: 1vw 0 0 0;
        padding: 0 0 30px 0;
        user-select: none;
        z-index: 2;
        transition: opacity 2s ease;
        white-space: nowrap;
    }


    .syw-cta-mobile {

        text-align: center;
        text-decoration: none;
        line-height: 40px;
        border: 0;
        text-wrap:nowrap;
        border-radius: 4px;
        background-color: #FFF;
        margin-bottom: -10px;
        padding: 0 25px;
        position: absolute;
        display: block;
        left: 50%;
        bottom: 5%;
        transform: translate(-50%, -50%);
        display: block;
        z-index: 1;
        pointer-events: all;
        box-shadow: 0px 17px 9px -15px rgb(0 0 0 / 50%);
        transition: box-shadow .2s ease;
    }

    .syw-cta-desktop {
        display: none;
        position: absolute;
        bottom: 3%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        /* color: #fff; */
        margin: 0;
        padding: 0;
        z-index: 2;
        cursor: pointer;
        pointer-events: all;
        text-decoration: none;
    }

    .syw-cta-desktop:hover, .syw-cta-desktop:focus {
        color: #fff;
        text-decoration: none;
    }

    .sywMainBanner__scrollTo-arrow {
        display: block;
        z-index: 3;
        width: 15px;
        height: 15px;
        margin: 2px auto 0;
        background: transparent;
        transform: translateX(-50%) rotate(45deg);
        cursor: pointer;
    }
   /* @media (min-width: 1024px) {
        .syw-container {
            height: 55vw;
            max-height: 80vh;
        } */

  @media (orientation: landscape) {
                .syw-header-content h1 {
                    font-size: 4vw;
                    padding-top: 50px;
                }


        .syw-cta-mobile {
            display: none;
        }

        .syw-cta-desktop {
            display: block;
        }
    }

    html {
        scroll-behavior: smooth;
    }
  .sywMainBanner__scrollTo-arrow {
    display: block;
    z-index: 3;
    width: 15px;
    height: 15px;
    margin: 2px auto 0;
    background: transparent;
    border-bottom: 2px solid #fff;
    border-right: 2px solid #fff;
    transform: translateX(-50%) rotate(45deg);
    cursor: pointer;
}
</style>

<div class="bellroy-section"   >
   <div class="syw-container"  style="{% if section.settings.background_type == "solid" %}
     background : {{ section.settings.background }};
     {% elsif section.settings.background_type == "gradient" %}
     background: {{ section.settings.gradient_color }};
     {% endif %}
     "
       data-number-of-items="{{ section.settings.number_of_items }}"
       data-items-0="{{ section.settings.items_0 }}"
       data-items-1="{{ section.settings.items_1 }}"
       data-items-2="{{ section.settings.items_2 }}"
       data-items-3="{{ section.settings.items_3 }}"
       data-items-4="{{ section.settings.items_4 }}"
       data-items-5="{{ section.settings.items_5 }}"
       data-items-6="{{ section.settings.items_6 }}"
       data-items-7="{{ section.settings.items_7 }}"
       data-items-8="{{ section.settings.items_8 }}"
       data-items-9="{{ section.settings.items_9 }}"
       data-items-10="{{ section.settings.items_10 }}"
       data-items-11="{{ section.settings.items_11 }}">

    <div class="image-container">
      {% for i in (0..section.settings.number_of_items) %}
        <div class="item-image" data-item-state="{{ i }}" style="opacity: {% if i == 0 %}1{% else %}0{% endif %}">     
          {%- assign image_key = 'image_' | append: i -%}
          {%- if section.settings[image_key] -%}
            {{ section.settings[image_key] | image_url: width: 1500 | image_tag }}
          {%- endif -%}
        </div>
      {% endfor %}
    </div>
<div class="line-container">
  <div class="line"  style="background:{{ section.settings.line1_color }}"> </div>
  <div class="line2 transition-grow" style="width: 100%; background:{{ section.settings.line2_color }}"> </div>
  {% for i in (1..section.settings.number_of_items) %}
  <div class="stop " style="width: calc(100% / {{ section.settings.number_of_items }});"> </div>
  {% endfor %}
  <div class="knob-container transition-grow" style="width: calc(100% + 32px);">
    <div class="knob" style="background:{{ section.settings.knob_color }}">
      <div class="syw-comparison-items" style="color:{{ section.settings.knob_text }}">{{ section.settings.items_0 }}</div>
    </div>
  </div>
  <div class="label empty" style="color:{{ section.settings.label_color }}">{{ section.settings.custom_text_title_3 }}</div>
  <div class="label full"style="color:{{ section.settings.label_color }}">{{ section.settings.custom_text_title_4 }}</div>
</div>

    <div class="syw-header-content">
      <h1 class="br_text-4xl-serif md:br_text-6xl-serif" style="color:{{ section.settings.title_color }}">{{ section.settings.custom_text_title }}</h1>
      <p class="br_text-base-sans-bold-stretched " style="color:{{ section.settings.body_color }}"  > {{ section.settings.custom_text_title_2 }}</p>
    </div>
    <a href="#" class="syw-cta-mobile br_text-base-sans-bold-cta-uppercase link" style="color:{{ section.settings.mobile_cta_color }}"  data-auto-id="true" id="collection-slim-your-item-syw-product-tabs-1">{{ section.settings.custom_text_title_6 }}</a>
    <a href="#" class="syw-cta-desktop br_text-base-sans-bold-stretched link "style="color:{{ section.settings.cta_color }}"  data-auto-id="true" id="collection-slim-your-item-usp-scroll-to-1">
      <span> {{ section.settings.custom_text_title_5 }}</span>
      <div class="sywMainBanner__scrollTo-arrow" style="border-bottom: 2px solid {{section.settings.arrow_color}}; border-right: 2px solid {{section.settings.arrow_color}};"> </div>
    </a> 
  </div>
</div>


{% schema %}
{
  "name": "bellroy section",
  "tag": "section",
  "class": "section",
  "settings": [
         {
      "type": "header",
      "content": "Color Settings"
    },
        {
      "id":"background_type",
      "label":"background Type",
      "type":"select",
      "default":"gradient",
      "options": [
        {
          "value": "solid",
          "label": "Solid Color",
          
        },
        {
          "value":"gradient",
          "label":"Gradient"
        }
      ]
    },
      {
      "type": "color",
      "id": "background",
      "label": "Background Color",
      "default": "#fff",
      "info": "This color will be used when 'Solid Color' is selected as the background type."

      
    },
         {
      "type": "color_background",
      "id": "gradient_color",
      "label": "gradient Color",
      "default": "linear-gradient(to bottom, #A3CBCC 48%, #98C3C5 50%)",
       "info": "This color will be used when 'Gradient' is selected as the background type."

    },
      {
      "type": "color",
      "id": "title_color",
      "label": "Title Color",
      "default": "#fff"
    },
    {
      "type": "color",
      "id": "body_color",
      "label": "Body Color",
      "default": "#000000"
    },

      {
      "type":"color",
      "id":"line1_color",
      "label": "Line1 color",
      "default": "#D1E1E4"
    },
      {
      "type":"color",
      "id":"line2_color",
      "label": "Line2 color",
      "default": "#357176"
    },
    {
      "type": "color",
      "id":"label_color",
      "label": "Side Labels Color",
      "default": "#fff",
    },
    {
      "type": "color",
      "id":"cta_color",
      "label": "CTA color",
      "default":"#fff"
    },
        {
      "type": "color",
      "id":"mobile_cta_color",
      "label": "Mobile CTA color",
      "default":"#336165"
    },
    {
    "type":"color",
    "id":"knob_color",
    "label":"Knob color",
    "default":"#fff"
    },
    {
    "type":"color",
    "id":"knob_text",
    "label":"Knob Text Color",
    "default":"#336165"
    },
    {
      "type": "color",
      "id":"left_border_color",
      "label":"Border Stop Color",
      "default":"#357176"
    },
    {
      "type": "color",
      "id":"right_border_color",
      "label":"Border Right Stop Color",
      "default":"#D1E1E4",
    },
    {
      "type": "color",
      "id":"arrow_color",
      "label":"CTA Arrow Color",
      "default":"#fff"
    },
    {
      "type": "text",
      "id": "custom_text_title",
      "label": "Text box heading",
      "default": "Affinez Votre Portefeuille"
    },
  
    {
      "type": "text", 
      "id": "custom_text_title_2",
      "label": "Add custom text below",
      "default": "Déplacez le curseur pour comparer les portefeuilles"
    },
        {
      "type": "text", 
      "id": "custom_text_title_3",
      "label": "left text",
      "default": "VIDE"
    },
            {
      "type": "text", 
      "id": "custom_text_title_4",
      "label": "right text",
      "default": "COMPLET"
    },
               {
      "type": "text", 
      "id": "custom_text_title_5",
      "label": "Desktop CTA label",
      "default": "Découvrez comment nous y parvenons"
    },
                   {
      "type": "text", 
      "id": "custom_text_title_6",
      "label": "Mobile CTA Button label",
      "default": "Voir maintenant"
    },
     {
      "type": "header",
      "content": "Item Text Settings"
    },
    {
      "type": "text",
      "id": "items_0",
      "label": "0 Items Text",
      "default": " 0 Cartes "
    },
    {
      "type": "text",
      "id": "items_1",
      "label": "1 Item Text",
      "default": "1 Carte"
    },
    {
      "type": "text",
      "id": "items_2",
      "label": "2 Items Text",
      "default": "2 Cartes"
    },
    {
      "type": "text",
      "id": "items_3",
      "label": "3 Items Text",
      "default": "3 Cartes"
    },
    {
      "type": "text",
      "id": "items_4",
      "label": "4 Items Text",
      "default": "4 Cartes"
    },
    {
      "type": "text",
      "id": "items_5",
      "label": "5 Items Text",
      "default": "5 Cartes"
    },
    {
      "type": "text",
      "id": "items_6",
      "label": "6 Items Text",
      "default": "6 Cartes"
    },
    {
      "type": "text",
      "id": "items_7",
      "label": "7 Items Text",
      "default": "7 Cartes"
    },
    {
      "type": "text",
      "id": "items_8",
      "label": "8 Items Text",
      "default": "8 Cartes"
    },
    {
      "type": "text",
      "id": "items_9",
      "label": "9 Items Text",
      "default": "9 Cartes"
    },
    {
      "type": "text",
      "id": "items_10",
      "label": "10 Items Text",
      "default": "10 Cartes"
    },
        {
      "type": "text",
      "id": "items_11",
      "label": "11 Items Text",
      "default": "+ vos billets"
    },
        {
      "type": "range",
      "id": "number_of_items",
      "min": 1,
      "max": 11,
      "step": 1,
      "default": 11,
      "label": "Number of Item Stops"
    },
    {
      "type": "header",
      "content": "Item Images"
    },
    {
      "type": "image_picker",
      "id": "image_0",
      "label": "0 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "1 Item Image"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "2 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "3 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "4 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "5 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "6 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_7",
      "label": "7 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_8",
      "label": "8 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_9",
      "label": "9 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_10",
      "label": "10 Items Image"
    },
    {
      "type": "image_picker",
      "id": "image_11",
      "label": "11 Items Image"
    },
    // ... continue for all Item states 
  ],
  "presets": [
    {
      "name": "bellroy section",
      "category": "custom"
    }
  ]
}
{% endschema %}

    <script>
       document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector(".syw-container");
  const numberOfitems = parseInt(container.getAttribute('data-number-of-items')) || 11; // fallback to 11 if not set
  
  const itemsTextKeys = [];
  for(let i = 0; i <= numberOfitems; i++) {
    itemsTextKeys.push(container.getAttribute(`data-items-${i}`));
  }
  itemsTextKeys.push(container.getAttribute('data-items-full'));

  // Debug output
  console.log('items text keys:', itemsTextKeys);
  
  const knobContainer = document.querySelector(".knob-container");
  const knob = document.querySelector(".knob");
  const lineContainer = document.querySelector(".line-container");
  const animatedLine = document.querySelector(".line2");
  const stops = [...document.querySelectorAll('.stop')];
  const itemImage = document.querySelector(".item-image");
  const imageContainer = document.querySelector(".image-container");
  const itemsText = document.querySelector('.syw-comparison-items');

  const knobWidth = knob.offsetWidth;
  const stopsNumber = numberOfitems;

  let timeOuts = [];
  let observingTouch = false;
  let startTouchPosition = 0;
  let currentStop = 0;
  let justFinishedTouch = false;

  for (let i = 0; i <= stopsNumber; i++) {
    timeOuts.push(setTimeout(() => {
      moveToNewStop(i);
      moveKnobToNewStop(i);
    }, i * 900));
  }

  function startObservingTouchPosition() {
    document.addEventListener('touchmove', onTouchMove);
    document.addEventListener('mousemove', onTouchMove);
  }

  function onTouchMove(e) {
    const eventX = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
    if (eventX === startTouchPosition) {
      return;
    }
    const movedDiff = eventX - startTouchPosition;
    startTouchPosition = eventX;
    const newKnobContainerWidth = knobContainer.offsetWidth + movedDiff;
    const newKnobMiddle = newKnobContainerWidth - knobWidth;
    const newStop = findNewStop(newKnobMiddle);
    currentStop = newStop;

    const maxWidth = lineContainer.offsetWidth + knobWidth;

    if (newKnobContainerWidth <= knobWidth) {
      return;
    } else if (newKnobContainerWidth >= maxWidth) {
      knobContainer.style.width = maxWidth + 'px';
    } else {
      knobContainer.style.width = newKnobContainerWidth * 100 / lineContainer.offsetWidth + '%';
    }
    moveToNewStop(newStop);
  }

  function onTouchEnd(e) {
    if (!observingTouch) {
      return;
    }

    document.removeEventListener('touchmove', onTouchMove);
    document.removeEventListener('mousemove', onTouchMove);
    knob.classList.remove("dragging");
    addTransitions();
    moveKnobToNewStop(currentStop);
    observingTouch = false;
    justFinishedTouch = true;
    setTimeout(() => {
      justFinishedTouch = false;
    }, 100);
  }

  function onTouchStart(e) {
    const eventX = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
    observingTouch = true;
    startTouchPosition = eventX;
    knob.classList.add('dragging');

    removeAnimation();
    removeTransitions();
    startObservingTouchPosition();
  }

  function onStopClick(e) {
    if (justFinishedTouch) {
      return;
    }
    removeAnimation();

    const stopDimensions = e.target.getBoundingClientRect();
    const middle = stopDimensions.x + (stopDimensions.width / 2);
    const isFirstHalfClicked = e.x < middle;

    const stopClicked = stops.indexOf(e.target);
    const stopToMoveTo = isFirstHalfClicked ? stopClicked : (stopClicked + 1);
    moveKnobToNewStop(stopToMoveTo);
    moveToNewStop(stopToMoveTo);
  }

  knob.addEventListener('touchstart', onTouchStart);
  knob.addEventListener('mousedown', onTouchStart);
  stops.forEach(s => {
    s.addEventListener('click', onStopClick);
  });

  document.addEventListener('touchend', onTouchEnd);
  document.addEventListener('mouseup', onTouchEnd);

  function findNewStop(knobMiddle) {
    const stopMiddles = stops.map(x => (x.offsetLeft + x.offsetWidth / 2));
    const middleDiffs = stopMiddles.map(x => (Math.abs(x - knobMiddle)));
    const smallestDiff = Math.min(...middleDiffs);
    const closestIndex = middleDiffs.indexOf(smallestDiff);
    const newIndex = knobMiddle > stopMiddles[closestIndex] ? closestIndex + 1 : closestIndex;
    return knobMiddle > stopMiddles[10] ? 11 : newIndex;
  }

  function moveToNewStop(stop) {
    const percentageToFill = 100 * stop / stopsNumber;
    animatedLine.style.width = percentageToFill + "%";
    itemsText.innerHTML = itemsTextKeys[stop];
    colourStopsUpTo(stop);

    // Update images
    const itemImages = document.querySelectorAll('.item-image');
    itemImages.forEach(image => {
        const itemState = parseInt(image.dataset.itemState);
        image.style.opacity = itemState === stop ? '1' : '0';
    });
  }

  function moveKnobToNewStop(stop) {
    const stopPercentage = 100 * stop / stopsNumber;
    knobContainer.style.width = `calc(${stopPercentage}% + 32px)`;
  }

  function removeAnimation() {
    if (!timeOuts.length) {
      return;
    }
    timeOuts.forEach(t => {
      clearTimeout(t);
    });
    timeOuts = [];
    stops.forEach(s => {
      const stopStyle = getComputedStyle(s);
      const borderStyle = stopStyle ? stopStyle.getPropertyValue("border-left-color") : null;
      const isActive = borderStyle == "rgb(53, 113, 118)";
      if (isActive) {
        s.classList.add("active");
      }
    });
  }

  function removeTransitions() {
    knobContainer.classList.remove("transition-grow");
  }

  function addTransitions() {
    knobContainer.classList.add("transition-grow");
  }

  function colourStopsUpTo(s) {
    stops.forEach((st, i) => {
      if (i < s) {
        st.classList.add("active");
      } else {
        st.classList.remove("active");
      }
    });
  }
});
    </script>
